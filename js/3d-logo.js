let scene,camera,renderer,logoGroup;let animationFrameId;let isInitialized=false;let mouseX=0;let mouseY=0;function init3DLogo(){if(isInitialized)return;isInitialized=true;const container=document.getElementById('logo-container');if(!container)return;container.innerHTML='';const canvas=document.createElement('canvas');canvas.id='logo-canvas';container.appendChild(canvas);const loading=document.createElement('div');loading.className='logo-loading';loading.innerHTML='<div class="spinner"></div><p>Initializing AI Logo...</p>';container.appendChild(loading);setTimeout(()=>{initThreeJS(canvas,loading);},100);}
function initThreeJS(canvas,loadingElement){if(typeof THREE==='undefined'){loadScript('https://cdnjs.cloudflare.com/ajax/libs/three.js/r134/three.min.js',()=>{loadScript('https://cdn.jsdelivr.net/npm/three@0.134.0/examples/js/controls/OrbitControls.js',()=>{setupScene(canvas,loadingElement);});});}else{if(typeof THREE.OrbitControls==='undefined'){loadScript('https://cdn.jsdelivr.net/npm/three@0.134.0/examples/js/controls/OrbitControls.js',()=>{setupScene(canvas,loadingElement);});}else{setupScene(canvas,loadingElement);}}}
function setupScene(canvas,loadingElement){scene=new THREE.Scene();camera=new THREE.PerspectiveCamera(75,canvas.clientWidth/canvas.clientHeight,0.1,1000);camera.position.z=5;renderer=new THREE.WebGLRenderer({canvas:canvas,antialias:true,alpha:true});renderer.setSize(canvas.clientWidth,canvas.clientHeight);renderer.setPixelRatio(window.devicePixelRatio);const ambientLight=new THREE.AmbientLight(0x404040,2);scene.add(ambientLight);const directionalLight=new THREE.DirectionalLight(0x00ff00,1);directionalLight.position.set(1,1,1);scene.add(directionalLight);const pointLight1=new THREE.PointLight(0x00ff00,2,10);pointLight1.position.set(2,2,2);scene.add(pointLight1);const pointLight2=new THREE.PointLight(0x00ffff,2,10);pointLight2.position.set(-2,-2,2);scene.add(pointLight2);logoGroup=new THREE.Group();scene.add(logoGroup);createLogo();createCircuitBoard();createParticles();let controls;try{controls=new THREE.OrbitControls(camera,renderer.domElement);controls.enableDamping=true;controls.dampingFactor=0.05;controls.enableZoom=false;controls.autoRotate=true;controls.autoRotateSpeed=1;}catch(error){console.warn('OrbitControls not available, using basic rotation');}
if(loadingElement){loadingElement.style.opacity=0;setTimeout(()=>{loadingElement.remove();},1000);}
window.addEventListener('resize',onWindowResize);document.addEventListener('mousemove',onMouseMove);animate();}
function createLogo(){const baseGeometry=new THREE.BoxGeometry(3,3,0.2);const baseMaterial=new THREE.MeshPhongMaterial({color:0x0a0a12,emissive:0x0a0a12,specular:0x111111,shininess:30});const base=new THREE.Mesh(baseGeometry,baseMaterial);logoGroup.add(base);const lineCount=6;const lineSpacing=2.8/(lineCount-1);const lineStart=-1.4;for(let i=0;i<lineCount;i++){const hLineGeometry=new THREE.BoxGeometry(2.8,0.03,0.01);const hLineMaterial=new THREE.MeshPhongMaterial({color:0x00ff00,emissive:0x00ff00,emissiveIntensity:0.5,transparent:true,opacity:0.7});const hLine=new THREE.Mesh(hLineGeometry,hLineMaterial);hLine.position.set(0,lineStart+i*lineSpacing,0.11);base.add(hLine);animateLine(hLine,i*0.2);const vLineGeometry=new THREE.BoxGeometry(0.03,2.8,0.01);const vLineMaterial=new THREE.MeshPhongMaterial({color:0x00ff00,emissive:0x00ff00,emissiveIntensity:0.5,transparent:true,opacity:0.7});const vLine=new THREE.Mesh(vLineGeometry,vLineMaterial);vLine.position.set(lineStart+i*lineSpacing,0,0.11);base.add(vLine);animateLine(vLine,i*0.2+0.1);}
const nodePositions=[[-1,-1,0.11],[0,0,0.11],[1,1,0.11],[-1,1,0.11],[1,-1,0.11]];nodePositions.forEach((pos,index)=>{const nodeGeometry=new THREE.SphereGeometry(0.15,16,16);const nodeMaterial=new THREE.MeshPhongMaterial({color:0x00ffff,emissive:0x00ffff,emissiveIntensity:0.5,transparent:true,opacity:0.8});const node=new THREE.Mesh(nodeGeometry,nodeMaterial);node.position.set(pos[0],pos[1],pos[2]);base.add(node);animateNode(node,index*0.2);});createAILetters();}
function createAILetters(){const aGeometry=new THREE.ExtrudeGeometry(createAShape(),{depth:0.2,bevelEnabled:false});const aMaterial=new THREE.MeshPhongMaterial({color:0x00ff00,emissive:0x00ff00,emissiveIntensity:0.5,transparent:true,opacity:0.9});const aLetter=new THREE.Mesh(aGeometry,aMaterial);aLetter.position.set(-0.8,-0.5,0.11);aLetter.scale.set(0.2,0.2,0.2);logoGroup.add(aLetter);const iGeometry=new THREE.ExtrudeGeometry(createIShape(),{depth:0.2,bevelEnabled:false});const iMaterial=new THREE.MeshPhongMaterial({color:0x00ff00,emissive:0x00ff00,emissiveIntensity:0.5,transparent:true,opacity:0.9});const iLetter=new THREE.Mesh(iGeometry,iMaterial);iLetter.position.set(0.2,-0.5,0.11);iLetter.scale.set(0.2,0.2,0.2);logoGroup.add(iLetter);animateLetter(aLetter,0);animateLetter(iLetter,0.3);}
function createCircuitBoard(){for(let i=0;i<20;i++){const pathGeometry=new THREE.TubeGeometry(createRandomCurve(),20,0.02,8,false);const pathMaterial=new THREE.MeshPhongMaterial({color:0x00ff00,emissive:0x00ff00,emissiveIntensity:0.3,transparent:true,opacity:0.5});const path=new THREE.Mesh(pathGeometry,pathMaterial);path.position.z=-0.5;logoGroup.add(path);animatePath(path,i*0.1);}}
function createParticles(){const particleCount=200;const particleGeometry=new THREE.BufferGeometry();const particlePositions=new Float32Array(particleCount*3);for(let i=0;i<particleCount;i++){const i3=i*3;particlePositions[i3]=(Math.random()-0.5)*10;particlePositions[i3+1]=(Math.random()-0.5)*10;particlePositions[i3+2]=(Math.random()-0.5)*10;}
particleGeometry.setAttribute('position',new THREE.BufferAttribute(particlePositions,3));const particleMaterial=new THREE.PointsMaterial({color:0x00ff00,size:0.05,transparent:true,opacity:0.7,blending:THREE.AdditiveBlending});const particles=new THREE.Points(particleGeometry,particleMaterial);scene.add(particles);animateParticles(particles);}
function createAShape(){const shape=new THREE.Shape();shape.moveTo(0,0);shape.lineTo(4,0);shape.lineTo(6,6);shape.lineTo(4,6);shape.lineTo(3,4);shape.lineTo(1,4);shape.lineTo(0,6);shape.lineTo(-2,6);shape.lineTo(0,0);const hole=new THREE.Path();hole.moveTo(2,2);hole.lineTo(3,2);hole.lineTo(2.5,3);hole.lineTo(1.5,3);hole.lineTo(2,2);shape.holes.push(hole);return shape;}
function createIShape(){const shape=new THREE.Shape();shape.moveTo(0,0);shape.lineTo(4,0);shape.lineTo(4,1);shape.lineTo(3,1);shape.lineTo(3,5);shape.lineTo(4,5);shape.lineTo(4,6);shape.lineTo(0,6);shape.lineTo(0,5);shape.lineTo(1,5);shape.lineTo(1,1);shape.lineTo(0,1);shape.lineTo(0,0);return shape;}
function createRandomCurve(){const points=[];const segmentCount=3+Math.floor(Math.random()*3);const startX=(Math.random()-0.5)*5;const startY=(Math.random()-0.5)*5;points.push(new THREE.Vector3(startX,startY,0));let currentX=startX;let currentY=startY;for(let i=0;i<segmentCount;i++){const isHorizontal=Math.random()>0.5;if(isHorizontal){currentX+=(Math.random()-0.5)*4;}else{currentY+=(Math.random()-0.5)*4;}
points.push(new THREE.Vector3(currentX,currentY,0));}
return new THREE.CatmullRomCurve3(points);}
function animateLine(line,delay){setInterval(()=>{line.material.emissiveIntensity=0.2+Math.random()*0.5;line.material.opacity=0.5+Math.random()*0.3;},1000+delay*1000);}
function animateNode(node,delay){setInterval(()=>{node.material.emissiveIntensity=0.3+Math.random()*0.7;node.scale.set(0.9+Math.random()*0.2,0.9+Math.random()*0.2,0.9+Math.random()*0.2);},1500+delay*1000);}
function animateLetter(letter,delay){setTimeout(()=>{setInterval(()=>{letter.material.emissiveIntensity=0.3+Math.random()*0.7;},1000);},delay*1000);}
function animatePath(path,delay){setTimeout(()=>{setInterval(()=>{path.material.opacity=0.2+Math.random()*0.4;},2000);},delay*1000);}
function animateParticles(particles){particles.userData={rotationSpeed:0.001,originalPositions:particles.geometry.attributes.position.array.slice()};}
function animate(){animationFrameId=requestAnimationFrame(animate);if(logoGroup){logoGroup.rotation.y+=0.005;logoGroup.rotation.x=Math.sin(Date.now()*0.001)*0.1;if(typeof THREE.OrbitControls==='undefined'&&mouseX!==undefined&&mouseY!==undefined){logoGroup.rotation.y+=mouseX*0.001;logoGroup.rotation.x+=mouseY*0.001;}}
const particles=scene.children.find(child=>child instanceof THREE.Points);if(particles){const positions=particles.geometry.attributes.position.array;const originalPositions=particles.userData.originalPositions;for(let i=0;i<positions.length;i+=3){const time=Date.now()*0.001;const ix=i/3;positions[i]=originalPositions[i]+Math.sin(time+ix)*0.1;positions[i+1]=originalPositions[i+1]+Math.cos(time+ix)*0.1;positions[i+2]=originalPositions[i+2]+Math.sin(time+ix)*0.1;}
particles.geometry.attributes.position.needsUpdate=true;particles.rotation.y+=0.001;}
if(renderer)renderer.render(scene,camera);}
function onWindowResize(){if(!camera||!renderer)return;const container=document.getElementById('logo-container');if(!container)return;const width=container.clientWidth;const height=container.clientHeight;camera.aspect=width/height;camera.updateProjectionMatrix();renderer.setSize(width,height);}
function onMouseMove(event){const container=document.getElementById('logo-container');if(!container)return;const rect=container.getBoundingClientRect();if(event.clientX>=rect.left&&event.clientX<=rect.right&&event.clientY>=rect.top&&event.clientY<=rect.bottom){mouseX=((event.clientX-rect.left)/rect.width)*2-1;mouseY=-((event.clientY-rect.top)/rect.height)*2+1;}}
function cleanup3DLogo(){if(animationFrameId){cancelAnimationFrame(animationFrameId);}
window.removeEventListener('resize',onWindowResize);document.removeEventListener('mousemove',onMouseMove);if(scene){scene.traverse(object=>{if(object.geometry)object.geometry.dispose();if(object.material){if(Array.isArray(object.material)){object.material.forEach(material=>material.dispose());}else{object.material.dispose();}}});}
scene=null;camera=null;renderer=null;logoGroup=null;isInitialized=false;}
function loadScript(url,callback){const script=document.createElement('script');script.type='text/javascript';script.src=url;script.onload=callback;document.head.appendChild(script);}
document.addEventListener('DOMContentLoaded',function(){const observer=new IntersectionObserver((entries)=>{entries.forEach(entry=>{if(entry.isIntersecting){init3DLogo();observer.disconnect();}});},{threshold:0.1});const container=document.getElementById('logo-container');if(container)observer.observe(container);});window.init3DLogo=init3DLogo;window.cleanup3DLogo=cleanup3DLogo;