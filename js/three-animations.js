let scene,camera,renderer,network;let nodes=[],connections=[];let raycaster,mouse,intersectedObject;let animationFrameId;const NODE_COUNT=40;const CONNECTION_DISTANCE=3;const PARTICLE_COUNT=150;const particles=[];function initThreeJS(){scene=new THREE.Scene();scene.background=new THREE.Color(0x121212);camera=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,0.1,1000);camera.position.z=15;renderer=new THREE.WebGLRenderer({antialias:true,alpha:true});renderer.setSize(window.innerWidth,window.innerHeight);renderer.setPixelRatio(window.devicePixelRatio);const container=document.getElementById('three-container');if(container){container.appendChild(renderer.domElement);}else{const newContainer=document.createElement('div');newContainer.id='three-container';newContainer.style.position='absolute';newContainer.style.top='0';newContainer.style.left='0';newContainer.style.width='100%';newContainer.style.height='100%';newContainer.style.zIndex='-1';newContainer.style.overflow='hidden';document.querySelector('#roi-calculator').prepend(newContainer);newContainer.appendChild(renderer.domElement);}
network=new THREE.Group();scene.add(network);raycaster=new THREE.Raycaster();mouse=new THREE.Vector2();const controls=new THREE.OrbitControls(camera,renderer.domElement);controls.enableDamping=true;controls.dampingFactor=0.05;controls.enableZoom=false;controls.autoRotate=true;controls.autoRotateSpeed=0.5;const ambientLight=new THREE.AmbientLight(0x404040);scene.add(ambientLight);const directionalLight=new THREE.DirectionalLight(0x4285f4,0.5);directionalLight.position.set(0,1,1);scene.add(directionalLight);createNetwork();window.addEventListener('resize',onWindowResize);renderer.domElement.addEventListener('mousemove',onMouseMove);renderer.domElement.addEventListener('click',onMouseClick);animate();fadeInAnimation();}
function createNetwork(){const nodeGeometry=new THREE.SphereGeometry(0.2,16,16);const nodeMaterial=new THREE.MeshPhongMaterial({color:0x4285f4,emissive:0x0d47a1,specular:0xffffff,shininess:50});for(let i=0;i<NODE_COUNT;i++){const node=new THREE.Mesh(nodeGeometry,nodeMaterial.clone());const radius=6*Math.random()+4;const theta=Math.random()*Math.PI*2;const phi=Math.random()*Math.PI;node.position.x=radius*Math.sin(phi)*Math.cos(theta);node.position.y=radius*Math.sin(phi)*Math.sin(theta);node.position.z=radius*Math.cos(phi);node.userData.originalPosition=node.position.clone();node.userData.originalColor=node.material.color.clone();nodes.push(node);network.add(node);}
const connectionMaterial=new THREE.LineBasicMaterial({color:0x34a853,transparent:true,opacity:0.4});for(let i=0;i<nodes.length;i++){for(let j=i+1;j<nodes.length;j++){const distance=nodes[i].position.distanceTo(nodes[j].position);if(distance<CONNECTION_DISTANCE){const geometry=new THREE.BufferGeometry().setFromPoints([nodes[i].position,nodes[j].position]);const connection=new THREE.Line(geometry,connectionMaterial.clone());connection.userData.startNode=i;connection.userData.endNode=j;connections.push(connection);network.add(connection);}}}
const particleGeometry=new THREE.SphereGeometry(0.05,8,8);const particleMaterial=new THREE.MeshBasicMaterial({color:0x34a853,transparent:true,opacity:0.8});for(let i=0;i<PARTICLE_COUNT;i++){if(connections.length===0)break;const particle=new THREE.Mesh(particleGeometry,particleMaterial.clone());const connectionIndex=Math.floor(Math.random()*connections.length);const connection=connections[connectionIndex];const startNode=nodes[connection.userData.startNode];const endNode=nodes[connection.userData.endNode];const t=Math.random();particle.position.copy(startNode.position).lerp(endNode.position,t);particle.userData.startNode=connection.userData.startNode;particle.userData.endNode=connection.userData.endNode;particle.userData.t=t;particle.userData.speed=0.005+Math.random()*0.01;particle.userData.direction=Math.random()>0.5?1:-1;particles.push(particle);network.add(particle);}}
function updateNetwork(){nodes.forEach((node,index)=>{const time=Date.now()*0.001;const originalPos=node.userData.originalPosition;node.position.x=originalPos.x+Math.sin(time*0.5+index)*0.2;node.position.y=originalPos.y+Math.cos(time*0.6+index)*0.2;node.position.z=originalPos.z+Math.sin(time*0.7+index)*0.2;});connections.forEach(connection=>{const startNode=nodes[connection.userData.startNode];const endNode=nodes[connection.userData.endNode];const points=[startNode.position,endNode.position];connection.geometry.setFromPoints(points);});particles.forEach(particle=>{const startNode=nodes[particle.userData.startNode];const endNode=nodes[particle.userData.endNode];particle.userData.t+=particle.userData.speed*particle.userData.direction;if(particle.userData.t>=1){particle.userData.t=0;}
else if(particle.userData.t<=0){particle.userData.t=1;}
particle.position.copy(startNode.position).lerp(endNode.position,particle.userData.t);});}
function pulseNetwork(){nodes.forEach((node,index)=>{setTimeout(()=>{gsap.to(node.material,{emissiveIntensity:2,duration:0.5,onComplete:()=>{gsap.to(node.material,{emissiveIntensity:0.5,duration:0.5});}});gsap.to(node.scale,{x:1.5,y:1.5,z:1.5,duration:0.5,onComplete:()=>{gsap.to(node.scale,{x:1,y:1,z:1,duration:0.5});}});},index*50);});}
function highlightConnections(nodeIndex){connections.forEach(connection=>{connection.material.opacity=0.2;connection.material.color.set(0x34a853);});connections.forEach(connection=>{if(connection.userData.startNode===nodeIndex||connection.userData.endNode===nodeIndex){connection.material.opacity=0.8;connection.material.color.set(0x4285f4);}});}
function onMouseMove(event){mouse.x=(event.clientX/window.innerWidth)*2-1;mouse.y=-(event.clientY/window.innerHeight)*2+1;raycaster.setFromCamera(mouse,camera);const intersects=raycaster.intersectObjects(nodes);if(intersectedObject&&(!intersects.length||intersectedObject!==intersects[0].object)){intersectedObject.material.emissive.set(0x0d47a1);intersectedObject.material.color.copy(intersectedObject.userData.originalColor);intersectedObject=null;}
if(intersects.length>0){intersectedObject=intersects[0].object;intersectedObject.material.emissive.set(0x64b5f6);intersectedObject.material.color.set(0x64b5f6);document.body.style.cursor='pointer';}else{document.body.style.cursor='default';}}
function onMouseClick(event){raycaster.setFromCamera(mouse,camera);const intersects=raycaster.intersectObjects(nodes);if(intersects.length>0){const nodeIndex=nodes.indexOf(intersects[0].object);highlightConnections(nodeIndex);pulseNetwork();}}
function animate(){animationFrameId=requestAnimationFrame(animate);updateNetwork();renderer.render(scene,camera);}
function fadeInAnimation(){const container=document.getElementById('three-container');container.style.opacity=0;gsap.to(container,{opacity:1,duration:2,delay:0.5});}
function stopAnimation(){if(animationFrameId){cancelAnimationFrame(animationFrameId);}}
function onWindowResize(){camera.aspect=window.innerWidth/window.innerHeight;camera.updateProjectionMatrix();renderer.setSize(window.innerWidth,window.innerHeight);}
function initWithCalculator(){if(document.getElementById('roi-calculator')){if(typeof THREE==='undefined'){loadScripts(['https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js','https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.min.js','https://cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/gsap.min.js'],initThreeJS);}else{initThreeJS();}}}
function loadScripts(urls,callback){let loadedCount=0;urls.forEach(url=>{const script=document.createElement('script');script.onload=function(){loadedCount++;if(loadedCount===urls.length){callback();}};script.src=url;document.head.appendChild(script);});}
function setupCalculatorInteraction(){const sliders=document.querySelectorAll('.slider');sliders.forEach(slider=>{slider.addEventListener('input',()=>{const randomNodeIndex=Math.floor(Math.random()*nodes.length);highlightConnections(randomNodeIndex);});slider.addEventListener('change',()=>{pulseNetwork();});});}
document.addEventListener('DOMContentLoaded',function(){initWithCalculator();setTimeout(setupCalculatorInteraction,1000);const calculatorNavItems=document.querySelectorAll('.calculator-nav-item');calculatorNavItems.forEach(item=>{item.addEventListener('click',()=>{setTimeout(pulseNetwork,300);});});});